How did viewing a diff between two versions of a file help you see the bug that
was introduced?    

The diff reduced the search scope for the bug. Even if the bug weren't in one of the changed lines, we could have looked at what areas of the code was influenced directly by the changed lines and expand our search there. All in all, much better thank looking through the entire project.

How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?

Using a relevant search scope when looking at how a feature was implemented, for example.


What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

Pros: we create a commit of logical chunks that make sense, we coordinate with teammates
Cons: prone to user errors (too little con in my opinion)

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git is used for programming, where code from multiple files works together. Google Docs is not used for programming.

How can you use the commands git log and git diff to view the history of files?

git logs shows all the commits in history. git diff compares the content of files between two commits.
    
How might using version control make you more confident to make changes that
could break something?

I can do experiments in a commit and if it doesn't work, then I can checkout to a previous commit and forget about it 

Now that you have your workspace set up, what do you want to try using Git for?

A new project :)
